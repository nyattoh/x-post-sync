/*
THIS IS A GENERATED/BUNDLED FILE BY ROLLUP
Please visit the GitHub repository for the source code: https://github.com/YOUR_USERNAME/x-posts-sync (UPDATE THIS LINK)
*/

'use strict';

var obsidian = require('obsidian');

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise */


function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, [])).next());
    });
}

function fetchUserId(username, requestUrl, bearerToken) {
    return __awaiter(this, void 0, void 0, function* () {
        var _a, _b;
        // Try X API v2 first if bearer token is available
        if (bearerToken) {
            const apiUrl = `https://api.x.com/2/users/by/username/${encodeURIComponent(username)}`;
            try {
                const res = yield requestUrl({
                    url: apiUrl,
                    headers: { Authorization: `Bearer ${bearerToken}` }
                });
                let jsonData;
                if (res.json) {
                    jsonData = res.json;
                }
                else if (res.text) {
                    try {
                        jsonData = JSON.parse(res.text);
                    }
                    catch (parseError) {
                        throw new Error(`Invalid JSON response from X API: ${res.text}`);
                    }
                }
                else {
                    throw new Error("Empty response from X API");
                }
                if ((_a = jsonData === null || jsonData === void 0 ? void 0 : jsonData.data) === null || _a === void 0 ? void 0 : _a.id) {
                    return String(jsonData.data.id);
                }
                if (jsonData === null || jsonData === void 0 ? void 0 : jsonData.errors) {
                    console.log("X API v2 errors, falling back to syndication:", jsonData.errors);
                }
            }
            catch (apiError) {
                console.log("X API v2 failed, trying syndication endpoint:", apiError.message);
            }
        }
        // Fallback to syndication API (no auth required)
        const syndicationUrl = "https://cdn.syndication.twimg.com/widgets/followbutton/info.json?screen_names=" + encodeURIComponent(username);
        try {
            const res = yield requestUrl({ url: syndicationUrl });
            // Handle different response formats
            let jsonData;
            if (res.json) {
                jsonData = res.json;
            }
            else if (res.text) {
                if (!res.text.trim()) {
                    throw new Error("Empty response from syndication API");
                }
                try {
                    jsonData = JSON.parse(res.text);
                }
                catch (parseError) {
                    throw new Error(`Invalid JSON response from syndication API: ${res.text}`);
                }
            }
            else {
                throw new Error("Empty response from syndication API");
            }
            // Ensure jsonData is an array
            const data = Array.isArray(jsonData) ? jsonData : [jsonData];
            const id = (_b = data[0]) === null || _b === void 0 ? void 0 : _b.id;
            if (!id) {
                throw new Error(`User ID not found for username: ${username}`);
            }
            return String(id);
        }
        catch (error) {
            throw new Error(`Failed to fetch user ID: ${error.message}`);
        }
    });
}
function fetchTweets(userId, bearer, requestUrl) {
    return __awaiter(this, void 0, void 0, function* () {
        var _a, _b;
        const url = `https://api.x.com/2/users/${userId}/tweets?max_results=100&exclude=replies&tweet.fields=created_at,referenced_tweets`;
        try {
            const res = yield requestUrl({
                url,
                headers: { Authorization: `Bearer ${bearer}` }
            });
            // Handle rate limit 429 error specifically
            if (res.status === 429) {
                const resetTime = (_a = res.headers) === null || _a === void 0 ? void 0 : _a['x-rate-limit-reset'];
                const resetTimeStr = resetTime ? new Date(parseInt(resetTime) * 1000).toLocaleString() : 'unknown';
                throw new Error(`Rate limit exceeded. Free tier: 100 reads/month. Reset: ${resetTimeStr}`);
            }
            // Handle different response formats
            let jsonData;
            if (res.json) {
                jsonData = res.json;
            }
            else if (res.text) {
                try {
                    jsonData = JSON.parse(res.text);
                }
                catch (parseError) {
                    throw new Error(`Invalid JSON response from X API: ${res.text}`);
                }
            }
            else {
                throw new Error("Empty response from X API");
            }
            // Check for API errors
            if (jsonData.errors) {
                const errorMsg = jsonData.errors.map((e) => e.message || e.detail).join(", ");
                throw new Error(`X API Error: ${errorMsg}`);
            }
            return (_b = jsonData.data) !== null && _b !== void 0 ? _b : [];
        }
        catch (error) {
            // Check if this is a rate limit error from Obsidian's requestUrl
            if (error.message && error.message.includes("status 429")) {
                throw new Error("Rate limit exceeded. Free tier: 100 reads/month. Please wait before trying again.");
            }
            // Check if the error has a status property indicating 429
            if (error.status === 429) {
                throw new Error("Rate limit exceeded. Free tier: 100 reads/month. Wait 15 minutes or check monthly usage.");
            }
            throw new Error(`Failed to fetch tweets: ${error.message}`);
        }
    });
}
function tweetToMarkdown(t) {
    var _a, _b, _c;
    const rt = (_c = (_b = (_a = t.referenced_tweets) === null || _a === void 0 ? void 0 : _a.find(r => r.type === "retweeted")) === null || _b === void 0 ? void 0 : _b.id) !== null && _c !== void 0 ? _c : "";
    return [
        "---",
        `id: ${t.id}`,
        `created_at: ${t.created_at}`,
        rt ? `retweeted_id: ${rt}` : "",
        "---",
        t.text,
        ""
    ].join("\n");
}

const DEFAULT_SETTINGS = {
    bearerToken: "",
    username: "",
    cachedUserId: "",
    interval: 60,
    monthlyRequestCount: 0,
    lastResetDate: ""
};
function checkMonthlyReset(settings) {
    const now = new Date();
    const currentMonth = `${now.getFullYear()}-${now.getMonth()}`;
    if (settings.lastResetDate !== currentMonth) {
        settings.monthlyRequestCount = 0;
        settings.lastResetDate = currentMonth;
        return true; // Reset occurred
    }
    return false; // No reset needed
}

class XPostsSync extends obsidian.Plugin {
    onload() {
        return __awaiter(this, void 0, void 0, function* () {
            this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
            this.addSettingTab(new Tab(this.app, this));
            this.addRibbonIcon("bookmark-star", "Sync My Posts", () => this.sync());
            this.status = this.addStatusBarItem();
            this.status.setText("XPostsSync ⏳ init");
            setTimeout(() => this.sync(), 2000);
            this.registerInterval(window.setInterval(() => this.sync(), this.settings.interval * 60000));
        });
    }
    onunload() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.sync();
            this.status.setText("XPostsSync 🛑 off");
        });
    }
    sync() {
        return __awaiter(this, void 0, void 0, function* () {
            const { bearerToken, username } = this.settings;
            if (!bearerToken || !username) {
                this.status.setText("XPostsSync ⚠ 未設定");
                return;
            }
            // Check and handle monthly reset
            const wasReset = checkMonthlyReset(this.settings);
            if (wasReset) {
                yield this.saveData(this.settings);
            }
            // Check monthly limit before making request
            if (this.settings.monthlyRequestCount >= 100) {
                this.status.setText("❌ 月次制限到達");
                new obsidian.Notice("X API月次制限(100 reads)に到達しました。翌月まで待機してください。");
                return;
            }
            try {
                if (!this.settings.cachedUserId) {
                    this.settings.cachedUserId = yield fetchUserId(username, obsidian.requestUrl, bearerToken);
                    yield this.saveData(this.settings);
                }
                const tweets = yield fetchTweets(this.settings.cachedUserId, bearerToken, obsidian.requestUrl);
                // Increment usage counter on successful API call
                this.settings.monthlyRequestCount++;
                yield this.saveData(this.settings);
                let n = 0;
                const a = this.app.vault.adapter;
                for (const t of tweets) {
                    const dir = `${t.created_at.slice(0, 10).replace(/-/g, "/")}/`;
                    const path = `${dir}${t.id}.md`;
                    if (yield a.exists(path))
                        continue;
                    yield a.mkdir(dir).catch(() => { });
                    yield a.write(path, tweetToMarkdown(t));
                    n++;
                }
                this.status.setText(`XPostsSync ✅ ${n} (${this.settings.monthlyRequestCount}/100)`);
            }
            catch (e) {
                console.error(e);
                if (e.message && e.message.includes("Rate limit exceeded")) {
                    this.status.setText("⏰ Rate limit");
                    new obsidian.Notice("Rate limit到達。15分後に再試行してください。");
                }
                else {
                    new obsidian.Notice("XPostsSync error: " + e.message);
                    this.status.setText("XPostsSync ❌ error");
                }
            }
        });
    }
}
class Tab extends obsidian.PluginSettingTab {
    constructor(app, plugin) {
        super(app, plugin);
        this.plugin = plugin;
    }
    display() {
        const c = this.containerEl;
        c.empty();
        c.createEl("h3", { text: "X Posts Sync" });
        new obsidian.Setting(c)
            .setName("📊 X API使用状況")
            .setDesc(`今月の使用量: ${this.plugin.settings.monthlyRequestCount}/100 reads`);
        new obsidian.Setting(c)
            .setName("⚠️ Free Tier制限")
            .setDesc("月100リクエストまで。超過時は翌月まで待機が必要です。");
        new obsidian.Setting(c)
            .setName("Bearer Token")
            .addText(t => t
            .setValue(this.plugin.settings.bearerToken)
            .onChange((v) => __awaiter(this, void 0, void 0, function* () {
            this.plugin.settings.bearerToken = v.trim();
            yield this.plugin.saveData(this.plugin.settings);
        })));
        new obsidian.Setting(c)
            .setName("Username (@無し)")
            .addText(t => t
            .setValue(this.plugin.settings.username)
            .onChange((v) => __awaiter(this, void 0, void 0, function* () {
            this.plugin.settings.username = v.trim();
            this.plugin.settings.cachedUserId = "";
            yield this.plugin.saveData(this.plugin.settings);
        })));
        new obsidian.Setting(c)
            .setName("Interval (min)")
            .addText(t => t
            .setValue(String(this.plugin.settings.interval))
            .onChange((v) => __awaiter(this, void 0, void 0, function* () {
            this.plugin.settings.interval = parseInt(v) || 60;
            yield this.plugin.saveData(this.plugin.settings);
        })));
    }
}

module.exports = XPostsSync;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
